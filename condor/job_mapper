#!/usr/bin/env python
'''
 This module takes an integer and translates it into a workload
 e.g. takes 1 gives (QCD_20to30_BCtoE,central) depending on the action wanted
 It will also parse all parameters defined in the condor job description file
 under 'arguments'.
 
 This module is not meant to be used in a manual workflow.
 It is in to be used with the condor script only
'''
from optparse import OptionParser
analysis_modes = ['central',
                 # 'Electron_down',
                 # 'Electron_up',
                 # 'Muon_down',
                 # 'Muon_up',
                 # 'BJet_down',
                 # 'BJet_up',
                 # 'JES_down',
                 # 'JES_up',
                 # 'LightJet_down',
                 # 'LightJet_up',
                 # 'PU_down',
                 # 'PU_up',
                 # 'JetSmearing_up',
                 # 'JetSmearing_down',
                 ]
samples = [
          'TTJet',
          'TTJets_Madgraph_PU30bx50',
          'TTJets_Madgraph_PU4bx50',
          'TT_Pythia8',
          'TT_Pythia8_PU30bx50',
          'TT_Pythia8_PU40bx25',
          
          'DYJetsToLL',
          'WJets',
          
          'GJets_100to200',
          'GJets_200to400',
          'GJets_600toInf',
          'QCD_EMEnriched_20to30',
          'QCD_EMEnriched_30to80',
          'QCD_EMEnriched_80to170',

          'QCD_bcToE_20to30',
          'QCD_bcToE_30to80',
          'QCD_bcToE_80to170',
          'QCD_bcToE_170toInf',

          'QCD_MuEnriched_20toInf',
          'QCD_MuEnriched_30to50',
          'QCD_MuEnriched_50to80',
          'QCD_MuEnriched_80to120',

          'TToLeptons_s', 'TToLeptons_t', 'T_tw', 
          'TBarToLeptons_s', 'TBarToLeptons_t', 'Tbar_tw', 
          ]

ignore_samples_7TeV = []
ignore_samples_8TeV = []

def build_matrix(energy):
    ignore_samples = []
    if energy == 7:
        ignore_samples = ignore_samples_7TeV
    if energy == 8:
        ignore_samples = ignore_samples_8TeV
        
    result = []
    for sample in samples:
        for mode in analysis_modes:
            if not sample in ignore_samples:
                result.append((sample, mode))
    return result

def main(options, args = []):
    # first the static options    
    if options.return_cmssw:
        return options.cmssw
    if options.return_energy:
        return options.energy
    if options.return_cores:
        return options.cores
    if options.return_process:
        return options.process
    if options.return_operation:
        return options.operation
    # now the dynamic options
    matrix = build_matrix(options.energy)

    if options.return_n_jobs:
        return len(matrix)
    
    if options.return_sample:
        if options.sample:
            return options.sample
        else:
            return matrix[options.process][0]
    
    if options.return_mode:
        if options.mode:
            return options.mode
        else:
            return matrix[options.process][1]

def parse_args(parameters = []):
    parser = OptionParser( '''executable for plotting of ROOT histograms
        Usage:
        plot <command> --files=[>= 1 file] --histograms=[>=1 histogram] --labels=[size == size(max(files,histograms)] [options]
        ''' )
    parser.add_option( '--process', dest = 'process', help = 'process',
                       type = int  )
    parser.add_option( '--cores', dest = 'cores', help = 'cores',
                       type = int  )
    parser.add_option( '--sample', dest = 'sample', help = 'sample' )
    parser.add_option( '--mode', dest = 'mode', help = 'mode')
    parser.add_option( '--cmssw', dest = 'cmssw', 
                       help = 'cmssw version (53X|73X|74X', default = '73X' )
    parser.add_option( '--operation', dest = 'operation', 
                       help = 'mode of operation: analysis|single|test', default = 'test' )
    parser.add_option( '--energy', dest = 'energy', 
                       help = 'centre-of-mass energy (7|8|13|14 TeV)',
                       type = int )
    parser.add_option("--return_sample", action = "store_true", dest = "return_sample",
                          help = "Returns the sample from the map based on process" )
    parser.add_option("--return_mode", action = "store_true", dest = "return_mode",
                          help = "Returns the analysis mode from the map based on process" )
    parser.add_option("--return_cmssw", action = "store_true", dest = "return_cmssw",
                          help = "Returns the CMSSW version" )
    parser.add_option("--return_energy", action = "store_true", dest = "return_energy",
                          help = "Returns the centre-of-mass energy" )
    parser.add_option("--return_cores", action = "store_true", dest = "return_cores",
                          help = "Returns the number of requested cores" )
    parser.add_option("--return_process", action = "store_true", dest = "return_process",
                          help = "Returns the number of requested cores" )
    parser.add_option("--return_operation", action = "store_true", dest = "return_operation",
                          help = "Returns the operation" )
    parser.add_option("--return_n_jobs", action = "store_true", dest = "return_n_jobs",
                          help = "Returns the operation" )
    
    options, args = None, None
    if len(parameters) > 0:
        ( options, args ) = parser.parse_args(parameters)
    else:
        ( options, args ) = parser.parse_args()
    return options, args

if __name__ == '__main__':
    options, args = parse_args()
    print main(options, args)
    